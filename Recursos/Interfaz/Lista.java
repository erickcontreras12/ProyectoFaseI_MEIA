/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import Clases.Archivo;
import Clases.ClaseGeneral;
import Clases.Indice;
import Clases.Listas;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author fabia
 */
public class Lista extends javax.swing.JFrame {

    boolean encontrado;
    String lista;
    String[] indice;
    int activos = 0;
    int inactivos = 0;
    int total = 0;

    /**
     * Creates new form Lista
     */
    public Lista() {
        initComponents();
        MostrarListas(ClaseGeneral.usuarioActual);
    }

    //metodo para ir a leer bitacora y archivo de lista
    public void MostrarListas(String usuario) {
        Archivo archivo = new Archivo();
        String[] datos;
        DefaultListModel modelo = new DefaultListModel();
        //Lee la bitacora para hacer una busqueda en esta
        String[] listas = archivo.leerArchivo("bitacora_lista");
        if (listas != null) {
            for (int i = 0; i < listas.length; i++) {
                if (listas[i] != null) {
                    datos = listas[i].split("\\|");
                    if (usuario.equals(datos[1])) {
                        modelo.addElement(datos[0]);

                    }
                }
            }
        }

        //Si no lo encontro en la bitacora lee lista
        listas = archivo.leerArchivo("lista");
        if (listas != null) {
            for (int i = 0; i < listas.length; i++) {
                if (listas[i] != null) {
                    datos = listas[i].split("\\|");

                    if (usuario.equals(datos[1])) {
                        modelo.addElement(datos[0]);

                    }
                }
            }
        }
        TodasListas.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TodasListas = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        agregar = new javax.swing.JButton();
        actual_lista = new javax.swing.JLabel();
        lista_actual = new javax.swing.JLabel();
        eliminar1 = new javax.swing.JButton();
        eliminartodos = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        usuarios_lista = new javax.swing.JList<>();
        jButton4 = new javax.swing.JButton();
        seleccionar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(TodasListas);

        jLabel1.setText("Listas");

        agregar.setText("AÃ±adir");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        actual_lista.setText("Lista Actual");

        eliminar1.setText("Eliminar amigo");
        eliminar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminar1ActionPerformed(evt);
            }
        });

        eliminartodos.setText("Eliminar Lista");

        jScrollPane2.setViewportView(usuarios_lista);

        jButton4.setText("Atras");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        seleccionar.setText("Seleccionar");
        seleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(actual_lista)
                    .addComponent(seleccionar)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(agregar)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(eliminar1)
                        .addGap(30, 30, 30)
                        .addComponent(eliminartodos)
                        .addGap(29, 29, 29)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lista_actual, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(26, 26, 26)
                        .addComponent(seleccionar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lista_actual)
                    .addComponent(actual_lista)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agregar)
                    .addComponent(eliminar1)
                    .addComponent(eliminartodos)
                    .addComponent(jButton4))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        Mantenimiento cambio = new Mantenimiento();
        cambio.show();
        this.hide();
    }//GEN-LAST:event_jButton4ActionPerformed

    //metodo para seleccionar el item de la lista
    private void seleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarActionPerformed
        // TODO add your handling code here:
        actual_lista.setText(TodasListas.getSelectedValue());
        lista = actual_lista.getText();
        buscarMiembros(lista);
    }//GEN-LAST:event_seleccionarActionPerformed

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        // TODO add your handling code here:

        if (actual_lista.getText().equals("Lista Actual")) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una lista primero");
        } else {
            int opc = JOptionPane.showConfirmDialog(null, "Desea ingresar en " + lista + "?");
            if (opc == 0) {
                Archivo archivo = new Archivo();
                Date fecha = new Date();
                String[] datos_lista = obtenerLista(lista, ClaseGeneral.usuarioActual);
                String usuario_asociado = JOptionPane.showInputDialog(null, "Ingrese el nombre del usuario");
                buscarUsuario(usuario_asociado);
                if (encontrado) {
                    String contenido = lista + "|" + ClaseGeneral.usuarioActual + "|" + usuario_asociado + "|" + datos_lista[2] + "|" + fecha.toString() + "|" + 1;
                    String[] datos = archivo.leerArchivo("lista_usuario");
                    int validar = 0;
                    if (datos != null) {
                        String[] evaluar = contenido.split("\\|");

                        for (int i = 0; i < datos.length; i++) {
                            if (datos[i] != null) {

                                String[] evaluar2 = datos[i].split("\\|");

                                if (evaluar[0].equals(evaluar2[0]) && evaluar[1].equals(evaluar2[1]) && evaluar[2].equals(evaluar2[2])) {
                                    validar++;
                                }
                            }

                        }

                    }
                    //Archivo bloque
                    if (validar == 0) {
                        archivo.escribirArchivo("lista_usuario", contenido, "");
                        actualizarDescriptor("lista_usuario");

                        //Archivo indexado
                        int posicion = obtenerPosicionEnBloque(lista, ClaseGeneral.usuarioActual, usuario_asociado);
                        if (posicion >= 0) {
                            indice = archivo.leerArchivo("indice_lista_usuario");
                            String[] bitacora_indexado = archivo.leerArchivo("desc_indice_lista_usuario");
                            String cant_registros = bitacora_indexado[6].substring(12);
                            int numRegistro = Integer.valueOf(cant_registros) + 1;
                            int siguiente = 0;
                            if (numRegistro == 1) {
                                siguiente = 0;
                            } else {
                                siguiente++;
                            }
                            //
                            contenido = numRegistro + "|" + posicion + "|" + lista + "|" + ClaseGeneral.usuarioActual + "|" + usuario_asociado + "|" + siguiente + "|" + 1;
                            archivo.escribirArchivo("indice_lista_usuario", contenido, "");

                            reorganizarIndice(lista, ClaseGeneral.usuarioActual, usuario_asociado, 0);
                            actualizarDescriptor2("indice_lista_usuario");
                            //Actualiza el valor de miembros en la lista
                            JOptionPane.showMessageDialog(null, "Usuario agregado");
                            buscarMiembros(lista);

                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "El usuario ingresado ya existe en esta Lista");
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "El usuario ingresado no existe");
                }
            }
        }
    }//GEN-LAST:event_agregarActionPerformed

    private void eliminar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminar1ActionPerformed
        // TODO add your handling code here:
        Archivo archivo = new Archivo();
        if (actual_lista.getText().equals("Lista Actual") || actual_lista.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una lista primero");
        } else {
            String usuario_asociado = usuarios_lista.getSelectedValue();
            if (usuario_asociado.equals("")) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un usuario");
            } else {
                int opc = JOptionPane.showConfirmDialog(null, "Desea eliminar a " + usuario_asociado + "de " + lista + "?");
                if (opc == 0) {

                    buscarUsuario(usuario_asociado);
                    if (encontrado) {
                        //Usar tu actualizarDatos() para eliminacion logica de lista_usuario

                        //Archivo indexado
                        int posicion = obtenerPosicionEnBloque(lista, ClaseGeneral.usuarioActual, usuario_asociado);
                        if (posicion >= 0) {

                            reorganizarIndice(lista, ClaseGeneral.usuarioActual, usuario_asociado, 1);
                            actualizarDescriptor2("indice_lista_usuario");
                            borrar_archivolista(lista, ClaseGeneral.usuarioActual, usuario_asociado);
                            actualizarDescriptor("lista_usuario");
                        }
                        JOptionPane.showMessageDialog(null, "Usuario eliminado");
                        buscarMiembros(lista);
                    } else {
                        JOptionPane.showMessageDialog(null, "El usuario ingresado no existe");
                    }
                }
            }
        }
    }//GEN-LAST:event_eliminar1ActionPerformed

    public String[] obtenerLista(String nombre, String usuario) {
        Archivo archivo = new Archivo();
        String[] datos;
        //Lee la bitacora para hacer una busqueda en esta
        String[] listas = archivo.leerArchivo("bitacora_lista");
        if (listas != null) {
            for (int i = 0; i < listas.length; i++) {
                if (listas[i] != null) {
                    datos = listas[i].split("\\|");

                    if (nombre.equals(datos[0]) && usuario.equals(datos[1])) {
                        return datos;
                    }
                }
            }
        }

        //Si no lo encontro en la bitacora lee lista
        listas = archivo.leerArchivo("lista");
        if (listas != null) {
            for (int i = 0; i < listas.length; i++) {
                if (listas[i] != null) {
                    datos = listas[i].split("\\|");

                    if (nombre.equals(datos[0]) && usuario.equals(datos[1])) {
                        return datos;
                    }
                }
            }
        }
        return null;
    }

    public void buscarMiembros(String nombreLista) {
        Archivo archivo = new Archivo();
        String[] usuarios = archivo.leerArchivo("indice_lista_usuario");
        String[] descriptor = archivo.leerArchivo("desc_indice_lista_usuario");
        String inicio = descriptor[5].substring(16);
        DefaultListModel modelo = new DefaultListModel();

        int siguiente = Integer.valueOf(inicio);
        while (siguiente != 0) {
            String[] actual = obtenerActual(siguiente);
            if (actual[2].equals(nombreLista) && actual[3].equals(ClaseGeneral.usuarioActual) && actual[6].equals("1")) {
                modelo.addElement(actual[4]);
            }

            siguiente = Integer.valueOf(actual[5]);
        }

        usuarios_lista.setModel(modelo);
    }

    public String[] obtenerActual(int registro) {
        Archivo archivo = new Archivo();
        String[] listado = archivo.leerArchivo("indice_lista_usuario");
        String[] datos = null;
        for (int i = 0; i < listado.length; i++) {
            if (listado[i] != null) {
                datos = listado[i].split("\\|");
                if (datos[0].equals(String.valueOf(registro))) {
                    return datos;
                }
            }
        }
        return datos;
    }

    public void borrar_archivolista(String nombre, String usuario, String usuario_asociado) {
        Archivo archivo = new Archivo();
        String[] lista_usuario = archivo.leerArchivo("lista_usuario");
        String[] datos = null;
        for (int i = 0; i < lista_usuario.length; i++) {
            if (lista_usuario[i] != null) {
                datos = lista_usuario[i].split("\\|");
                if (datos[0].equals(nombre) && datos[1].equals(usuario) && datos[2].equals(usuario_asociado)) {
                    datos[5] = "0";
                    lista_usuario[i] = armarCadena(datos);
                }
            }
        }

        archivo.limpiarArchivo("lista_usuario");
        for (int i = 0; i < lista_usuario.length; i++) {
            if (lista_usuario[i] != null) {
                archivo.escribirArchivo("lista_usuario", lista_usuario[i], "");
            }
        }

    }

    public void reorganizarIndice(String nombre, String usuario, String usuario_asociado, int opc) {
        Archivo archivo = new Archivo();
        //opc 0 es para cuando se agrega un usuario y opc 1 cuando se elimina               
        if (opc == 0) {
            ArrayList<Indice> original = new ArrayList<>();
            ArrayList<Indice> ordenada = new ArrayList<>();
            String[] datos;
            //Lee la bitacora para hacer una busqueda en esta
            String[] listas = archivo.leerArchivo("indice_lista_usuario");
            if (listas != null) {
                for (int i = 0; i < listas.length; i++) {
                    if (listas[i] != null) {
                        datos = listas[i].split("\\|");
                        original.add(new Indice(datos[0], datos[1], datos[2], datos[3], datos[4], datos[5], datos[6]));
                    }
                }
            }
            for (int i = 0; i < original.size(); i++) {
                ordenada.add(original.get(i));
            }
            Collections.sort(ordenada, Comparator.comparing(Indice::getNombre).
                    thenComparing(Indice::getUsuario).thenComparing(Indice::getAsociado));

            String[] cambios, cambios2;
            for (int i = 0; i < listas.length; i++) {
                if (listas[i] != null) {
                    cambios = ordenada.get(i).toString().split("\\|");
                    Indice aux = new Indice(cambios[0], cambios[1], cambios[2], cambios[3], cambios[4], cambios[5], cambios[6]);
                    int pos2 = 0;
                    for (int j = 0; j < original.size(); j++) {
                        if (original.get(j).toString().equals(aux.toString())) {
                            pos2 = j;
                        }
                    }
                    if (i + 1 < ordenada.size()) {
                        cambios2 = ordenada.get(i + 1).toString().split("\\|");
                        aux = new Indice(cambios2[0], cambios2[1], cambios2[2], cambios2[3], cambios2[4], cambios2[5], cambios2[6]);
                        Integer cambio = 0;
                        for (int z = 0; z < original.size(); z++) {
                            if (original.get(z).toString().equals(aux.toString())) {
                                cambio = z + 1;
                            }
                        }
                        Indice aux2 = new Indice(cambios[0], cambios[1], cambios[2], cambios[3], cambios[4], cambio.toString(), cambios[6]);
                        original.set(pos2, aux2);
                    } else {
                        aux = new Indice(cambios[0], cambios[1], cambios[2], cambios[3], cambios[4], "0", cambios[6]);
                        original.set(pos2, aux);
                    }
                }
            }

            archivo.limpiarArchivo("indice_lista_usuario");
            for (int i = 0; i < original.size(); i++) {
                archivo.escribirArchivo("indice_lista_usuario", original.get(i).toString(), "");
            }

        } else if (opc == 1) {
            String[] listado = archivo.leerArchivo("indice_lista_usuario");
            String[] descriptor = archivo.leerArchivo("desc_indice_lista_usuario");
            String inicio = descriptor[5].substring(16);
            int siguiente = Integer.valueOf(inicio);
            while (siguiente != 0) {
                String[] actual = obtenerActual(siguiente);
                if (actual[2].equals(nombre) && actual[3].equals(ClaseGeneral.usuarioActual)
                        && actual[4].equals(usuario_asociado)) {
                    //Aux va a buscar el valor en listado para ponerle 0 al eliminado
                    String[] aux;
                    for (int i = 0; i < listado.length; i++) {
                        if (listado[i] != null) {
                            aux = listado[i].split("\\|");
                            if (aux[0].equals(String.valueOf(siguiente))) {
                                aux[6] = "0";
                                aux[5] = "0";
                                listado[i] = armarCadena(aux);
                            }
                        }
                    }

                    //Eliminacion al final
                    if (actual[5].equals("0")) {
                        //Busco el que esta antes del final
                        for (int i = 0; i < listado.length; i++) {
                            if (listado[i] != null) {
                                aux = listado[i].split("\\|");
                                if (aux[0].equals(String.valueOf(siguiente - 1))) {
                                    aux[5] = "0";
                                    listado[i] = armarCadena(aux);
                                }
                            }
                        }
                    }//Eliminacion en medio
                    else {
                        //Busco el que esta antes del eliminado para que apunte al que sigue del eliminado
                        for (int i = 0; i < listado.length; i++) {
                            if (listado[i] != null) {
                                aux = listado[i].split("\\|");
                                if (aux[0].equals(String.valueOf(siguiente + 1))) {
                                    aux[5] = String.valueOf(siguiente - 1);
                                    listado[i] = armarCadena(aux);
                                }
                            }
                        }
                    }

                    break;
                }

                siguiente = Integer.valueOf(actual[5]);
            }

            //reescribe el archivo
            archivo.limpiarArchivo("indice_lista_usuario");
            for (int i = 0; i < listado.length; i++) {
                if (listado[i] != null) {
                    archivo.escribirArchivo("indice_lista_usuario", listado[i], "");
                }
            }
        }
    }

    public String armarCadena(String[] datos) {
        String cadena = "";
        for (int i = 0; i < datos.length; i++) {
            if (i == datos.length - 1) {
                cadena += datos[i];
                break;
            }
            cadena += datos[i] + "|";
        }
        return cadena;
    }

    /**
     * Metodo para obtener la posicion del usuario asociado en una lista en el
     * bloque de lista usuario
     *
     * @param nombre
     * @param usuario
     * @param usuario_asociado
     * @return
     */
    public int obtenerPosicionEnBloque(String nombre, String usuario, String usuario_asociado) {
        Archivo archivo = new Archivo();
        int posicion = -1;
        String[] usuarios = archivo.leerArchivo("lista_usuario");
        for (int i = 0; i < usuarios.length; i++) {
            if (usuarios[i] != null) {
                String[] datos = usuarios[i].split("\\|");
                if (datos[0].equals(nombre) && datos[1].equals(usuario) && datos[2].equals(usuario_asociado)) {
                    posicion = i;
                }
            }
        }
        return posicion;
    }

    public void buscarUsuario(String usuario) {
        Archivo archivo = new Archivo();
        encontrado = false;
        String[] datos;
        //Lee la bitacora para hacer una busqueda en esta
        String[] usuarios = archivo.leerArchivo("bitacora");
        if (usuarios != null) {
            for (int i = 0; i < usuarios.length; i++) {
                if (usuarios[i] != null) {
                    datos = usuarios[i].split("\\|");
                    if (usuario.equals(datos[0])) {
                        encontrado = true;
                        ClaseGeneral.datosUsuarioBuscado = datos;
                        break;
                    }
                }
            }
        }

        //Si no lo encontro en la bitacora lee usuarios
        if (!encontrado) {
            usuarios = null;
            usuarios = archivo.leerArchivo("usuario");
            if (usuarios != null) {
                for (int i = 0; i < usuarios.length; i++) {
                    if (usuarios[i] != null) {
                        datos = usuarios[i].split("\\|");
                        if (usuario.equals(datos[0])) {
                            encontrado = true;
                            ClaseGeneral.datosUsuarioBuscado = datos;
                            break;
                        }
                    }
                }
            }
        }
    }

    public void actualizarDescriptor(String descriptor) {
        Archivo archivo = new Archivo();
        String[] split = archivo.leerArchivo("desc_" + descriptor);
        Date fecha = new Date();

        if (split[2].equals("usuario_creacion:")) {

            split[2] = "usuario_creacion:" + ClaseGeneral.usuarioActual;
        }
        split[3] = "fecha_modificacion:" + fecha.toString();
        split[4] = "usuario_modificacion:" + ClaseGeneral.usuarioActual;
        //calcula el total de usuarios en el archivo original
        contarUsuarios(descriptor);
        split[5] = "#_registros:" + total;
        split[6] = "registro_activos:" + activos;
        split[7] = "registro_inactivos:" + inactivos;

        String error = "";
        archivo.limpiarArchivo("desc_" + descriptor);
        for (int i = 0; i < split.length; i++) {
            if (split[i] != null) {
                archivo.escribirArchivo("desc_" + descriptor, split[i], error);
            }
        }
    }

    public void actualizarDescriptor2(String descriptor) {
        Archivo archivo = new Archivo();
        String[] split = archivo.leerArchivo("desc_" + descriptor);
        String[] datos = archivo.leerArchivo(descriptor);
        Date fecha = new Date();

        if (split[2].equals("usuario_creacion:")) {

            split[2] = "usuario_creacion:" + ClaseGeneral.usuarioActual;
        }
        split[3] = "fecha_modificacion:" + fecha.toString();
        split[4] = "usuario_modificacion:" + ClaseGeneral.usuarioActual;

        //busca en donde esta el menor para ponerle el inicio
        int comparador = 10;
        String[] inicio = datos[0].split("\\|"); //supone que el primero siempre es el menor
        for (int i = 0; i < datos.length; i++) {
            if (datos[i] != null) {
                String[] aux = datos[i].split("\\|");
                //Valida que el estatus indique que esta activo
                if (aux[6].equals("1")) {
                    //Nombre de la lista
                    comparador = inicio[2].compareTo(aux[2]);
                    //Si es el mismo nombre de lista pasa a evaluar la siguiente llave
                    if (comparador == 0) {
                        //Usuario propietario de la lsita
                        comparador = inicio[3].compareTo(aux[3]);
                        //Si es el mismo usuario para el siguiente criterio
                        if (comparador == 0) {
                            //Usuario asociado a la lista
                            comparador = inicio[4].compareTo(aux[4]);
                            if (comparador >= 1) {
                                inicio = aux;
                            }
                        } else if (comparador >= 1) {
                            inicio = aux;
                        }
                    } else if (comparador >= 1) {
                        inicio = aux;
                    }
                }
            }
        }

        split[5] = "inicio_registro:" + inicio[0];
        //calcula el total de usuarios en el archivo original
        contarUsuarios2(descriptor);
        split[6] = "#_registros:" + total;
        split[7] = "registro_activos:" + activos;
        split[8] = "registro_inactivos:" + inactivos;

        String error = "";
        archivo.limpiarArchivo("desc_" + descriptor);
        for (int i = 0; i < split.length; i++) {
            if (split[i] != null) {
                archivo.escribirArchivo("desc_" + descriptor, split[i], error);
            }
        }
    }

    public void contarUsuarios(String nombreArchivo) {
        Archivo archivo = new Archivo();
        String[] split = archivo.leerArchivo(nombreArchivo);

        activos = 0;
        inactivos = 0;

        for (int i = 0; i < split.length; i++) {
            if (split[i] != null) {
                String[] datos = split[i].split("\\|");
                if (datos[5].equals("1")) {
                    activos++;
                } else if (datos[5].equals("0")) {
                    inactivos++;
                }
            }
        }
        total = activos + inactivos;
    }

    public void contarUsuarios2(String nombreArchivo) {
        Archivo archivo = new Archivo();
        String[] split = archivo.leerArchivo(nombreArchivo);

        activos = 0;
        inactivos = 0;

        for (int i = 0; i < split.length; i++) {
            if (split[i] != null) {
                String[] datos = split[i].split("\\|");
                if (datos[6].equals("1")) {
                    activos++;
                } else if (datos[6].equals("0")) {
                    inactivos++;
                }
            }
        }
        total = activos + inactivos;
    }

    public void actualizarDatos() {
        Archivo archivo = new Archivo();
        boolean estaEnBitacora = false;
        String[] datosLista = null, split = null, splitaux = null, cambiar = null;

        int posicion = 0;

        split = archivo.leerArchivo("bitacora_lista");
        splitaux = split;
        for (int i = 0; i < split.length; i++) {
            if (split[i] != null) {
                datosLista = split[i].split("\\|");
                if (datosLista[0].equals(lista)) {
                    posicion = i;
                    splitaux[posicion] = "";
                    cambiar = datosLista;

                } else {
                    splitaux[i] = split[i];
                }
            }
        }

        cambiar[3] = "0";

        //Rearma la linea de los datos del usuario
        String cadena = "";
        for (int i = 0; i < cambiar.length; i++) {
            if (i == cambiar.length - 1) {
                cadena += cambiar[i];
                break;
            }
            cadena += cambiar[i] + "|";
        }

        splitaux[posicion] = cadena;

        //Rearma todo el contenido del split para escribirlo en el archivo
        archivo.limpiarArchivo("usuario");
        String error = "";
        cadena = "";
        for (int i = 0; i < splitaux.length; i++) {
            if (splitaux[i] != null) {
                archivo.escribirArchivo2("usuario", splitaux[i], error);
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Lista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> TodasListas;
    private javax.swing.JLabel actual_lista;
    private javax.swing.JButton agregar;
    private javax.swing.JButton eliminar1;
    private javax.swing.JButton eliminartodos;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lista_actual;
    private javax.swing.JButton seleccionar;
    private javax.swing.JList<String> usuarios_lista;
    // End of variables declaration//GEN-END:variables
}
