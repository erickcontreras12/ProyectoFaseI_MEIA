/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import BaseDeDatos.BDD;
import Clases.Archivo;
import Clases.ClaseGeneral;
import Clases.Mail;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.SQLException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Erick Contreras
 */
public class Correo extends javax.swing.JFrame {
    
    Archivo archivo = new Archivo();
    boolean error = false, encontrado = false, activo = false;
    boolean vacio = true;
    int activos = 0;
    int inactivos = 0;
    int total = 0;
    File Adjunto;

    /**
     * Creates new form Correo
     */
    public Correo() throws ClassNotFoundException, SQLException {
        initComponents();
        BDD.getInstancia().conexion();
        if (ClaseGeneral.esExterno) {
            this.jLabel4.setText("Numero de grupo");
            this.jBoxLista.hide();
            this.jDestinatario.setText("");
            this.jAsunto.setText("");
            
            listasUsuario.addItem("");
            for (int i = 1; i <= 16; i++) {  //Agregar el nuevo de listas xd
                listasUsuario.addItem(String.valueOf(i));
            }
            this.listasUsuario.enable(true);
        } else {
            this.jLabel4.setText("Lista de destinatarios");
            actualizarListas();
            if (ClaseGeneral.responder) {
                this.jDestinatario.setEditable(false);
                this.jAsunto.setEditable(false);
                this.jAsunto.setText(ClaseGeneral.correo[6]);
                this.jBoxLista.enable(false);
                if (ClaseGeneral.bandejaEntrada) {
                    this.jDestinatario.setText(ClaseGeneral.correo[3]);
                } else {
                    this.jDestinatario.setText(ClaseGeneral.correo[4]);
                }
                
            } else {
                this.jDestinatario.setText("");
                this.jAsunto.setText("");
            }
            this.listasUsuario.enable(false);
        }
        
        this.jAdjunto.enable(false);
        this.jAdjunto.setText("");
        this.jMensaje.setText("");
    }
    
    Correo(String valueOf, String dato, String dato0, String dato1, String dato2, String dato3, String dato4, String dato5, String dato6, String dato7) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jAsunto = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jDestinatario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jMensaje = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        listasUsuario = new javax.swing.JComboBox<>();
        jAdjunto = new javax.swing.JTextField();
        jBtnExaminar = new javax.swing.JButton();
        jBtnEnviar = new javax.swing.JButton();
        jBtnCancelar = new javax.swing.JButton();
        jBoxLista = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jLabel1.setText("Asunto");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/LOGO_MEIA2 p.png"))); // NOI18N

        jDestinatario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDestinatarioActionPerformed(evt);
            }
        });

        jLabel3.setText("Destinatario");

        jMensaje.setColumns(20);
        jMensaje.setRows(5);
        jScrollPane1.setViewportView(jMensaje);

        jLabel4.setText("Lista de destinatarios");

        jAdjunto.setEditable(false);

        jBtnExaminar.setText("Examinar");
        jBtnExaminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnExaminarActionPerformed(evt);
            }
        });

        jBtnEnviar.setText("Enviar");
        jBtnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEnviarActionPerformed(evt);
            }
        });

        jBtnCancelar.setText("Cancelar");
        jBtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelarActionPerformed(evt);
            }
        });

        jBoxLista.setText("Lista de difusion");
        jBoxLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBoxListaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(10, 10, 10)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jAsunto, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                            .addComponent(jDestinatario))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addGap(43, 43, 43))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(31, 31, 31)
                        .addComponent(listasUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBoxLista)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jBtnCancelar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBtnEnviar))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jAdjunto, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jBtnExaminar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jAsunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jDestinatario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(listasUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBoxLista))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jAdjunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnExaminar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnEnviar)
                    .addComponent(jBtnCancelar))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jDestinatarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDestinatarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jDestinatarioActionPerformed

    private void jBtnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEnviarActionPerformed
        // TODO add your handling code here:
        String error = validarError();
        if (error.equals("")) {
            if (ClaseGeneral.esExterno) {
                try {
                    BDD.getInstancia().Insert(10, Integer.valueOf(listasUsuario.getSelectedItem().toString()),
                            ClaseGeneral.usuarioActual, jDestinatario.getText(), jAsunto.getText(), jMensaje.getText());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Correo.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(Correo.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(null, "Solicitud enviada");
                this.hide();
                Bandeja bandeja = null;
                try {
                    bandeja = new Bandeja();
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Correo.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(Correo.class.getName()).log(Level.SEVERE, null, ex);
                }
                bandeja.show();
            }else{
                if (jBoxLista.isSelected()) {
                //Insercion de lista
                insertarCorreoALista(listasUsuario.getSelectedItem().toString());
                JOptionPane.showMessageDialog(null, "Envio exitoso");
                actualizarDescriptor("correo");
                this.hide();
                Bandeja bandeja = null;
                try {
                    bandeja = new Bandeja();
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Correo.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(Correo.class.getName()).log(Level.SEVERE, null, ex);
                }
                bandeja.show();
            } else {
                buscarUsuario(jDestinatario.getText());
                if (encontrado && activo) {
                    //Insercion individual
                    insertarCorreo(ClaseGeneral.usuarioActual, jDestinatario.getText());
                    JOptionPane.showMessageDialog(null, "Envio exitoso");
                    actualizarDescriptor("correo");
                    this.hide();
                    Bandeja bandeja = null;
                    try {
                        bandeja = new Bandeja();
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(Correo.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(Correo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    bandeja.show();
                    
                } else if (!encontrado) {
                    JOptionPane.showMessageDialog(null, "El usuario ingresado no existe");
                } else if (!activo) {
                    JOptionPane.showMessageDialog(null, "El usuario ingresado esta inactivo, no puede agregarlo");
                }
            }
            }
            
            
            
        } else {
            JOptionPane.showMessageDialog(null, error);
        }
    }//GEN-LAST:event_jBtnEnviarActionPerformed

    private void jBtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelarActionPerformed
        // TODO add your handling code here:
        int opc = JOptionPane.showConfirmDialog(null, "Seguro que desea cancelar?");
        if (opc == 0) {
            this.hide();
            Bandeja bandeja = null;
            try {
                bandeja = new Bandeja();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Correo.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Correo.class.getName()).log(Level.SEVERE, null, ex);
            }
            bandeja.show();
        }
    }//GEN-LAST:event_jBtnCancelarActionPerformed

    private void jBoxListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBoxListaActionPerformed
        // TODO add your handling code here:
        if (jBoxLista.isSelected()) {
            listasUsuario.enable(true);
            jDestinatario.enable(false);
        } else {
            listasUsuario.enable(false);
            jDestinatario.enable(true);
        }
    }//GEN-LAST:event_jBoxListaActionPerformed

    private void jBtnExaminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnExaminarActionPerformed
        // TODO add your handling code here:
        JFileChooser dialogo = new JFileChooser();
        // FileNameExtensionFilter filtro = new FileNameExtensionFilter("Foto de perfil", "jpg");
        File ficheroadjunto;
        String rutaArchivo;
        //dialogo.setFileFilter(filtro);
        int valor = dialogo.showOpenDialog(this);
        if (valor == JFileChooser.APPROVE_OPTION) {
            ficheroadjunto = dialogo.getSelectedFile();
            rutaArchivo = ficheroadjunto.getPath();
            Copiar(ficheroadjunto);
            jAdjunto.setText(Adjunto.getPath());
        }

    }//GEN-LAST:event_jBtnExaminarActionPerformed
    
    public void Copiar(File origen) {
        
        String ruta_destino = "C:\\MEIA\\adjuntos";
        File ruta = new File(ruta_destino);
        if (!ruta.exists()) {
            ruta.mkdir();
        }
        
        File nuevo = new File(ruta_destino + "\\" + origen.getName());
        
        try {
            Files.copy(Paths.get(origen.getAbsolutePath()), Paths.get(nuevo.getAbsolutePath()), StandardCopyOption.REPLACE_EXISTING);
            Adjunto = new File(ruta_destino + "\\" + origen.getName());
        } catch (Exception e) {
            
        }
    }
    
    private void insertarCorreoALista(String nombreLista) {
        String[] lista_usuarios = archivo.leerArchivo("lista_usuario");
        
        if (lista_usuarios != null) {
            for (int i = 0; i < lista_usuarios.length; i++) {
                if (lista_usuarios[i] != null) {
                    String[] data = lista_usuarios[i].split("\\|");
                    if (nombreLista.equals(data[0]) && ClaseGeneral.usuarioActual.equals(data[1])
                            && data[5].equals("1")) {
                        insertarCorreo(ClaseGeneral.usuarioActual, data[2]);
                        actualizarDescriptor("correo");
                    }
                }
            }
        }
    }
    
    private void insertarCorreo(String emisor, String receptor) {
        String[] correos = archivo.leerArchivo("correo");
        Date fecha = new Date();
        String[] descriptor = archivo.leerArchivo("desc_correo");
        String registros = descriptor[6].substring(12);
        int numRegistro = Integer.valueOf(registros) + 1;
        
        String contenido = numRegistro + "|" + "0" + "|" + "0" + "|" + emisor + "|" + receptor + "|"
                + fecha.toString() + "|" + jAsunto.getText() + "|" + jMensaje.getText() + "|"
                + jAdjunto.getText()
                + "|1";
        
        archivo.escribirArchivo("correo", contenido, emisor);
        
        reorganizarArbol(emisor, receptor, fecha.toString(), String.valueOf(numRegistro));
    }
    
    private void reorganizarArbol(String emisor, String receptor, String fecha, String numRegistro) {
        String[] correos = archivo.leerArchivo("correo");
        String[] descriptor = archivo.leerArchivo("desc_correo");
        String inicio = descriptor[5].substring(16);
        
        if (correos != null) {
            
            if (inicio.equals("0")) {
                ClaseGeneral.raiz = "1";
            } else {
                ClaseGeneral.raiz = inicio;
            }
            
            if (!inicio.equals("0")) {
                //Insercion interna
                int comparador = 10;
                String siguiente = inicio;
                boolean modificado = false;
                while (!modificado) {
                    String[] actual = obtenerActual(siguiente);
                    boolean esIzquierdo = false;
                    
                    comparador = emisor.compareTo(actual[3]);
                    if (comparador == 0) {
                        //Emisor es el mismo valido ahora el receptor
                        comparador = receptor.compareTo(actual[4]);
                        if (comparador == 0) {
                            //Emisor y receptor iguales, valido la fecha
                            comparador = fecha.compareTo(actual[5]);
                            if (comparador <= -1) {
                                esIzquierdo = true;
                            }
                        } else if (comparador <= -1) {
                            esIzquierdo = true;
                        }
                    } else if (comparador <= -1) {
                        esIzquierdo = true;
                    }

                    /*Ahora que conozco la direccion valido si puede insertarse directo en la
                    posicion que sea, de lo contrario tomo el valor del siguiente nodo
                     */
                    if (esIzquierdo) {
                        //Puede ingresarse en el izquierdo
                        if (actual[1].equals("0")) {
                            actual[1] = numRegistro;
                            correos = modificarDatoEnCorreos(correos, actual);
                            modificado = true;
                        } else {
                            siguiente = actual[1];
                        }
                    } else {
                        //Puede ingresarse en el derecho
                        if (actual[2].equals("0")) {
                            actual[2] = numRegistro;
                            correos = modificarDatoEnCorreos(correos, actual);
                            modificado = true;
                        } else {
                            siguiente = actual[2];
                        }
                    }
                    
                }
                
                archivo.limpiarArchivo("correo");
                for (int i = 0; i < correos.length; i++) {
                    if (correos[i] != null) {
                        archivo.escribirArchivo("correo", correos[i], "");
                    }
                }
            }
        }
    }
    
    public void actualizarDescriptor(String descriptor) {
        String[] split = archivo.leerArchivo("desc_" + descriptor);
        Date fecha = new Date();
        
        if (split[2].equals("usuario_creacion:")) {
            
            split[2] = "usuario_creacion:" + ClaseGeneral.usuarioActual;
        }
        split[3] = "fecha_modificacion:" + fecha.toString();
        split[4] = "usuario_modificacion:" + ClaseGeneral.usuarioActual;
        //calcula el total de usuarios en el archivo original
        contarCorreos();
        split[6] = "#_registros:" + total;
        split[7] = "registro_activos:" + activos;
        split[8] = "registro_inactivos:" + inactivos;

        //Valido la raiz
        if (activos == 0) {
            split[5] = "inicio_registro:" + 0;
        } else {
            split[5] = "inicio_registro:" + ClaseGeneral.raiz;
        }
        
        String error = "";
        archivo.limpiarArchivo("desc_" + descriptor);
        for (int i = 0; i < split.length; i++) {
            if (split[i] != null) {
                archivo.escribirArchivo("desc_" + descriptor, split[i], error);
            }
        }
    }
    
    private String[] modificarDatoEnCorreos(String[] cadena, String[] dato) {
        if (cadena != null) {
            for (int i = 0; i < cadena.length; i++) {
                if (cadena[i] != null) {
                    String[] aux = cadena[i].split("\\|");
                    if (aux[3].equals(dato[3]) && aux[4].equals(dato[4]) && aux[5].equals(dato[5])) {
                        cadena[i] = armarCadena(dato);
                        break;
                    }
                }
            }
        }
        
        return cadena;
    }
    
    private String armarCadena(String[] datos) {
        String cadena = "";
        for (int i = 0; i < datos.length; i++) {
            if (i == datos.length - 1) {
                cadena += datos[i];
                break;
            }
            cadena += datos[i] + "|";
        }
        return cadena;
    }
    
    private String[] obtenerActual(String registro) {
        String[] correos = archivo.leerArchivo("correo");
        String[] datos = null;
        for (int i = 0; i < correos.length; i++) {
            if (correos[i] != null) {
                datos = correos[i].split("\\|");
                if (datos[0].equals(registro)) {
                    return datos;
                }
            }
        }
        return datos;
    }
    
    private String validarError() {
        error = false;

        //Asunto vacio
        if (jAsunto.getText().equals("")) {
            error = true;
            return "Debe agregar un asunto al correo";
        }
        //Si el mensaje es individual
        if (!jBoxLista.isSelected() && jDestinatario.getText().equals("")) {
            error = true;
            return "Debe seleccionar un usuario";
        }
        //Si es una lista de difusion
        if (jBoxLista.isSelected() && listasUsuario.getSelectedItem().equals("")) {
            error = true;
            return "Debe seleccionar una lista de difusion ";
        }
        
        if (ClaseGeneral.esExterno && listasUsuario.getSelectedItem().equals("")) {
            error = true;
            return "Debe seleccionar una lista de difusion ";
        }
        
        return "";
    }
    
    private void actualizarListas() {
        listasUsuario.addItem("");
        String[] datos;
        //Lee la bitacora para hacer una busqueda en esta
        String[] listas = archivo.leerArchivo("bitacora_lista");
        if (listas != null) {
            for (int i = 0; i < listas.length; i++) {
                if (listas[i] != null) {
                    datos = listas[i].split("\\|");
                    if (ClaseGeneral.usuarioActual.equals(datos[1]) && datos[5].equals("1")) {
                        listasUsuario.addItem(datos[0]);
                    }
                }
            }
        }

        //Si no lo encontro en la bitacora lee lista
        listas = archivo.leerArchivo("lista");
        if (listas != null) {
            for (int i = 0; i < listas.length; i++) {
                if (listas[i] != null) {
                    datos = listas[i].split("\\|");
                    if (ClaseGeneral.usuarioActual.equals(datos[1]) && datos[5].equals("1")) {
                        listasUsuario.addItem(datos[0]);
                    }
                }
            }
        }
    }
    
    private void contarCorreos() {
        String[] split = archivo.leerArchivo("correo");
        
        activos = 0;
        inactivos = 0;
        
        for (int i = 0; i < split.length; i++) {
            if (split[i] != null) {
                String[] datos = split[i].split("\\|");
                if (datos[9].equals("1")) {
                    activos++;
                } else if (datos[9].equals("0")) {
                    inactivos++;
                }
            }
        }
        total = activos + inactivos;
    }
    
    public void buscarUsuario(String usuario) {
        encontrado = false;
        activo = false;
        String[] datos;
        //Lee la bitacora para hacer una busqueda en esta
        String[] usuarios = archivo.leerArchivo("bitacora");
        if (usuarios != null) {
            for (int i = 0; i < usuarios.length; i++) {
                if (usuarios[i] != null) {
                    datos = usuarios[i].split("\\|");
                    if (usuario.equals(datos[0])) {
                        encontrado = true;
                        ClaseGeneral.datosUsuarioBuscado = datos;
                        break;
                    }
                }
            }
        }

        //Si no lo encontro en la bitacora lee usuarios
        if (!encontrado) {
            usuarios = null;
            usuarios = archivo.leerArchivo("usuario");
            if (usuarios != null) {
                for (int i = 0; i < usuarios.length; i++) {
                    if (usuarios[i] != null) {
                        datos = usuarios[i].split("\\|");
                        if (usuario.equals(datos[0])) {
                            encontrado = true;
                            ClaseGeneral.datosUsuarioBuscado = datos;
                            break;
                        }
                    }
                }
            }
        }

        //Si lo encontro valida si el usuario esta activo
        if (encontrado) {
            if (ClaseGeneral.datosUsuarioBuscado[9].equals("1")) {
                activo = true;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Correo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Correo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Correo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Correo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Correo().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Correo.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(Correo.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jAdjunto;
    private javax.swing.JTextField jAsunto;
    private javax.swing.JCheckBox jBoxLista;
    private javax.swing.JButton jBtnCancelar;
    private javax.swing.JButton jBtnEnviar;
    private javax.swing.JButton jBtnExaminar;
    private javax.swing.JTextField jDestinatario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextArea jMensaje;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> listasUsuario;
    // End of variables declaration//GEN-END:variables
}
